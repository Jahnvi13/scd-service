// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/scd.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SCDService_GetLatestJobs_FullMethodName             = "/scd.SCDService/GetLatestJobs"
	SCDService_UpdateJob_FullMethodName                 = "/scd.SCDService/UpdateJob"
	SCDService_GetLatestTimelogs_FullMethodName         = "/scd.SCDService/GetLatestTimelogs"
	SCDService_UpdateTimelog_FullMethodName             = "/scd.SCDService/UpdateTimelog"
	SCDService_GetLatestPaymentLineItems_FullMethodName = "/scd.SCDService/GetLatestPaymentLineItems"
	SCDService_UpdatePaymentLineItem_FullMethodName     = "/scd.SCDService/UpdatePaymentLineItem"
)

// SCDServiceClient is the client API for SCDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SCDServiceClient interface {
	GetLatestJobs(ctx context.Context, in *GetLatestJobsRequest, opts ...grpc.CallOption) (*GetLatestJobsResponse, error)
	UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*Job, error)
	GetLatestTimelogs(ctx context.Context, in *GetLatestTimelogsRequest, opts ...grpc.CallOption) (*GetLatestTimelogsResponse, error)
	UpdateTimelog(ctx context.Context, in *UpdateTimelogRequest, opts ...grpc.CallOption) (*Timelog, error)
	GetLatestPaymentLineItems(ctx context.Context, in *GetLatestPaymentLineItemsRequest, opts ...grpc.CallOption) (*GetLatestPaymentLineItemsResponse, error)
	UpdatePaymentLineItem(ctx context.Context, in *UpdatePaymentLineItemRequest, opts ...grpc.CallOption) (*PaymentLineItem, error)
}

type sCDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSCDServiceClient(cc grpc.ClientConnInterface) SCDServiceClient {
	return &sCDServiceClient{cc}
}

func (c *sCDServiceClient) GetLatestJobs(ctx context.Context, in *GetLatestJobsRequest, opts ...grpc.CallOption) (*GetLatestJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestJobsResponse)
	err := c.cc.Invoke(ctx, SCDService_GetLatestJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCDServiceClient) UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*Job, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Job)
	err := c.cc.Invoke(ctx, SCDService_UpdateJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCDServiceClient) GetLatestTimelogs(ctx context.Context, in *GetLatestTimelogsRequest, opts ...grpc.CallOption) (*GetLatestTimelogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestTimelogsResponse)
	err := c.cc.Invoke(ctx, SCDService_GetLatestTimelogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCDServiceClient) UpdateTimelog(ctx context.Context, in *UpdateTimelogRequest, opts ...grpc.CallOption) (*Timelog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Timelog)
	err := c.cc.Invoke(ctx, SCDService_UpdateTimelog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCDServiceClient) GetLatestPaymentLineItems(ctx context.Context, in *GetLatestPaymentLineItemsRequest, opts ...grpc.CallOption) (*GetLatestPaymentLineItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestPaymentLineItemsResponse)
	err := c.cc.Invoke(ctx, SCDService_GetLatestPaymentLineItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCDServiceClient) UpdatePaymentLineItem(ctx context.Context, in *UpdatePaymentLineItemRequest, opts ...grpc.CallOption) (*PaymentLineItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentLineItem)
	err := c.cc.Invoke(ctx, SCDService_UpdatePaymentLineItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SCDServiceServer is the server API for SCDService service.
// All implementations must embed UnimplementedSCDServiceServer
// for forward compatibility.
type SCDServiceServer interface {
	GetLatestJobs(context.Context, *GetLatestJobsRequest) (*GetLatestJobsResponse, error)
	UpdateJob(context.Context, *UpdateJobRequest) (*Job, error)
	GetLatestTimelogs(context.Context, *GetLatestTimelogsRequest) (*GetLatestTimelogsResponse, error)
	UpdateTimelog(context.Context, *UpdateTimelogRequest) (*Timelog, error)
	GetLatestPaymentLineItems(context.Context, *GetLatestPaymentLineItemsRequest) (*GetLatestPaymentLineItemsResponse, error)
	UpdatePaymentLineItem(context.Context, *UpdatePaymentLineItemRequest) (*PaymentLineItem, error)
	mustEmbedUnimplementedSCDServiceServer()
}

// UnimplementedSCDServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSCDServiceServer struct{}

func (UnimplementedSCDServiceServer) GetLatestJobs(context.Context, *GetLatestJobsRequest) (*GetLatestJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestJobs not implemented")
}
func (UnimplementedSCDServiceServer) UpdateJob(context.Context, *UpdateJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (UnimplementedSCDServiceServer) GetLatestTimelogs(context.Context, *GetLatestTimelogsRequest) (*GetLatestTimelogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestTimelogs not implemented")
}
func (UnimplementedSCDServiceServer) UpdateTimelog(context.Context, *UpdateTimelogRequest) (*Timelog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTimelog not implemented")
}
func (UnimplementedSCDServiceServer) GetLatestPaymentLineItems(context.Context, *GetLatestPaymentLineItemsRequest) (*GetLatestPaymentLineItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestPaymentLineItems not implemented")
}
func (UnimplementedSCDServiceServer) UpdatePaymentLineItem(context.Context, *UpdatePaymentLineItemRequest) (*PaymentLineItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentLineItem not implemented")
}
func (UnimplementedSCDServiceServer) mustEmbedUnimplementedSCDServiceServer() {}
func (UnimplementedSCDServiceServer) testEmbeddedByValue()                    {}

// UnsafeSCDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SCDServiceServer will
// result in compilation errors.
type UnsafeSCDServiceServer interface {
	mustEmbedUnimplementedSCDServiceServer()
}

func RegisterSCDServiceServer(s grpc.ServiceRegistrar, srv SCDServiceServer) {
	// If the following call pancis, it indicates UnimplementedSCDServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SCDService_ServiceDesc, srv)
}

func _SCDService_GetLatestJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCDServiceServer).GetLatestJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SCDService_GetLatestJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCDServiceServer).GetLatestJobs(ctx, req.(*GetLatestJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCDService_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCDServiceServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SCDService_UpdateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCDServiceServer).UpdateJob(ctx, req.(*UpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCDService_GetLatestTimelogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestTimelogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCDServiceServer).GetLatestTimelogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SCDService_GetLatestTimelogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCDServiceServer).GetLatestTimelogs(ctx, req.(*GetLatestTimelogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCDService_UpdateTimelog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTimelogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCDServiceServer).UpdateTimelog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SCDService_UpdateTimelog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCDServiceServer).UpdateTimelog(ctx, req.(*UpdateTimelogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCDService_GetLatestPaymentLineItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestPaymentLineItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCDServiceServer).GetLatestPaymentLineItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SCDService_GetLatestPaymentLineItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCDServiceServer).GetLatestPaymentLineItems(ctx, req.(*GetLatestPaymentLineItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCDService_UpdatePaymentLineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentLineItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCDServiceServer).UpdatePaymentLineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SCDService_UpdatePaymentLineItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCDServiceServer).UpdatePaymentLineItem(ctx, req.(*UpdatePaymentLineItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SCDService_ServiceDesc is the grpc.ServiceDesc for SCDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SCDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scd.SCDService",
	HandlerType: (*SCDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestJobs",
			Handler:    _SCDService_GetLatestJobs_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _SCDService_UpdateJob_Handler,
		},
		{
			MethodName: "GetLatestTimelogs",
			Handler:    _SCDService_GetLatestTimelogs_Handler,
		},
		{
			MethodName: "UpdateTimelog",
			Handler:    _SCDService_UpdateTimelog_Handler,
		},
		{
			MethodName: "GetLatestPaymentLineItems",
			Handler:    _SCDService_GetLatestPaymentLineItems_Handler,
		},
		{
			MethodName: "UpdatePaymentLineItem",
			Handler:    _SCDService_UpdatePaymentLineItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/scd.proto",
}
